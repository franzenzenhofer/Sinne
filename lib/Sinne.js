// Generated by CoffeeScript 1.3.1
(function() {
  var Sinne;

  Sinne = {};

  window.Sinne = Sinne;

  Sinne.getUserMedia = function(options, success, error) {
    var config_object, config_string, r;
    navigator.getUserMedia_ = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (!!navigator.getUserMedia_) {
      config_object = {};
      config_string = '';
      if (options.video === true) {
        config_object.video = true;
        config_string = 'video';
      }
      if (options.audio === true) {
        config_object.audio = true;
        if (config_string !== '') {
          config_string = config_string + ', ';
        }
        config_string = config_string + 'audio';
      }
      try {
        r = navigator.getUserMedia_(config_object, success, error);
      } catch (e) {
        try {
          r = navigator.getUserMedia_(config_string, success, error);
        } catch (e2) {
          error({
            name: 'configuration_syntax_not_supported',
            message: 'could not configure getUserMedia',
            sinne_error_id: 1
          });
          return false;
        }
      }
      return r;
    } else {
      return error({
        name: 'getUsereMedia_not_supported',
        message: 'getUsereMedia is not supported',
        sinne_error_id: 0
      });
    }
  };

  Sinne.getUserVideo = function(success, error) {
    var success_, video_element;
    video_element = document.createElement('video');
    video_element.autoplay = true;
    if (typeof video_element.play === "function") {
      video_element.play();
    }
    success_ = function(stream) {
      var vendorURL, _ref;
      if ((typeof MediaStream !== "undefined" && MediaStream !== null) && stream instanceof MediaStream) {
        video_element.src = stream;
        video_element.play();
      } else {
        vendorURL = (_ref = window.URL) != null ? _ref : window.webkitURL;
        video_element.src = vendorURL ? vendorURL.createObjectURL(stream) : stream;
      }
      return success(video_element, stream);
    };
    return Sinne.getUserMedia({
      video: true
    }, success_, error);
  };

  Sinne.getUserAudio = function(success, error) {
    var audio_element, success_;
    audio_element = document.createElement('audio');
    audio_element.autoplay = true;
    if (typeof audio_element.play === "function") {
      audio_element.play();
    }
    success_ = function(stream) {
      var vendorURL, _ref;
      if ((typeof MediaStream !== "undefined" && MediaStream !== null) && stream instanceof MediaStream) {
        audio_element.src = stream;
        audio_element.play();
      } else {
        vendorURL = (_ref = window.URL) != null ? _ref : window.webkitURL;
        audio_element.src = vendorURL ? vendorURL.createObjectURL(stream) : stream;
      }
      return success(audio_element, stream);
    };
    return Sinne.getUserMedia({
      audio: true
    }, success_, error);
  };

}).call(this);
